(function() {
	var Client, Account, Project, request,
	__bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	__slice = [].slice;

	request = require('request');

	Account = require('./account');

	Project = require('./project');
	
	//TODO require all modules here for instances below

	Client = (function() {
		
		function Client(accountId, token) {
			this.accountId = accountId;
			this.token = token;
		}

		Client.prototype.account = function() {
			return new Account(this)
		}

		Client.prototype.project = function(id) {
			return new Project(id, this);
		};

		Client.prototype.query = function(path, params) {
			var uri;
			if (path == null) {
				path = '/';
			}
			if (path[0] !== '/') {
				path = '/' + path;
			}
			uri = "https://";
			uri += typeof this.token === 'object' && this.token.username ? "" + this.token.username + ":" + this.token.password + "@" : '';
			uri += "basecamp.com/" + this.accountId + '/api/v1' + path + '.json';
			// if (params !== null) {
			// 	uri += querystring.stringify(params);
			// }
			return uri;
		};

		Client.prototype.errorHandle = function(res, body, callback) {
			var _ref;
			if (Math.floor(res.statusCode / 100) === 5) {
				return callback(new Error('Error ' + res.statusCode));
			}
			try {
				body = JSON.parse(body || '{}');
			} catch (err) {
				return callback(err);
			}
			if (body.message && res.statusCode === 422) {
				return callback(new Error(body.message));
			}
			if (body.message && ((_ref = res.statusCode) === 400 || _ref === 401 || _ref === 404)) {
				return callback(new Error(body.message));
			}
			return callback(null, res.statusCode, body, res.headers);
		};

		Client.prototype.get = function() {
			var callback, params, path, _i,
				_this = this;
				path = arguments[0], params = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
			return request({
				uri: this.query.apply(this, [path].concat(__slice.call(params))),
				method: 'GET',
				headers: {
					'User-Agent': 'camper/0.1 (https://github.com/jbielick) terminal/0.0'
				}
			}, function(err, res, body) {
				if (err) {
					return callback(err);
				}
				return _this.errorHandle(res, body, callback);
			});
		};

		Client.prototype.post = function(path, content, callback) {
			var _this = this;
			var payload = JSON.stringify(content);
			return request({
				uri: this.query(path),
				method: 'POST',
				body: payload,
				headers: {
					'Content-Type': 'application/json',
					'User-Agent': 'camper/0.1 (https://github.com/jbielick) terminal/0.0',
					'Content-Length': ''+payload.length()
				}
			}, function(err, res, body) {
				if (err) {
					return callback(err);
				}
				return _this.errorHandle(res, body, callback);
			});
		};

		Client.prototype.put = function(path, content, callback) {
			var _this = this;
			var payload = JSON.stringify(content);
			return request({
				uri: this.query(path),
				method: 'PUT',
				body: payload,
				headers: {
					'Content-Type': 'application/json',
					'User-Agent': 'camper/0.1 (https://github.com/jbielick) terminal/0.0',
					'Content-Length': ''+payload.length()
				}
			}, function(err, res, body) {
				if (err) {
					return callback(err);
				}
				return _this.errorHandle(res, body, callback);
			});
		};

		Client.prototype.del = function(path, content, callback) {
			var _this = this;
			return request({
				uri: this.query(path),
				method: 'DELETE',
				body: JSON.stringify(content),
				headers: {
					'Content-Type': 'application/json',
					'User-Agent': 'camper/0.1 (https://github.com/jbielick) terminal/0.0'
				}
			}, function(err, res, body) {
				if (err) {
					return callback(err);
				}
				return _this.errorHandle(res, body, callback);
			});
		};

		return Client;
	
	})();

  module.exports = function() {
    var credentials, token;
    token = arguments[0], credentials = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Client, [token].concat(__slice.call(credentials)), function(){});
  };

}).call(this);
